{"version":3,"sources":["todo/AddTodo.js","todo/TodoList2.js","todo/HeaderApp.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","state","task","onHandleChange","bind","onHandleSubmit","e","this","setState","target","value","preventDefault","onSubmit","formData","URLSearchParams","append","axios","post","then","response","noValidate","autoComplete","action","method","IconButton","color","aria-label","type","fontSize","TextField","id","label","variant","name","onChange","Component","TodoList2","loadingData","a","get","contents","data","console","log","checked","max_content_id","_id","handleToggle","currentIndex","indexOf","newChecked","push","splice","handleDelete","_contents","Array","from","i","length","deleteTodo","List","map","labelId","ListItem","key","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","_task","maxId","concat","done","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","React","useState","auth","setAuth","anchorEl","setAnchorEl","open","Boolean","curDate","Date","date","getFullYear","getMonth","getDate","handleClose","className","FormGroup","FormControlLabel","control","Switch","event","AppBar","position","Toolbar","Typography","aria-controls","aria-haspopup","currentTarget","Avatar","alt","src","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","App","user","Container","maxWidth","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e44ea936.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { post } from 'axios';\r\nimport axios from 'axios'; \r\n\r\nclass AddTodo extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        task: \"\"\r\n      };\r\n\r\n      this.onHandleChange = this.onHandleChange.bind(this);\r\n      this.onHandleSubmit = this.onHandleSubmit.bind(this);\r\n  }\r\n\r\n  onHandleChange(e) {\r\n    this.setState({\r\n      task: e.target.value\r\n    });\r\n  }\r\n\r\n  onHandleSubmit(e) {\r\n    e.preventDefault();\r\n    const task = this.state.task;\r\n    this.props.onSubmit(task);\r\n\r\n    //서버로 등록\r\n    const formData = new URLSearchParams();\r\n    formData.append('task',task);\r\n    formData.append('done',false);\r\n\r\n    axios.post('http://3.35.89.32:5000/api/create', formData)\r\n    .then((response) => {\r\n    // console.log(response.data);\r\n    this.setState({\r\n      task: \"\"\r\n    })\r\n    // this.props.stateRefresh();\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form \r\n            noValidate \r\n            autoComplete=\"off\"\r\n            action=\"/create_todo\"\r\n            method=\"post\"\r\n            // onChange={this.onHandleChange}\r\n            onSubmit = {this.onHandleSubmit}\r\n            // onSubmit={function (e) {\r\n            //      e.preventDefault();\r\n            //      this.props.onSubmit(e.target.task.value);\r\n            // }.bind(this)}\r\n        >\r\n          <IconButton color=\"primary\" aria-label=\"add to shopping cart\" type=\"submit\">\r\n            <AddCircleIcon fontSize=\"large\" />\r\n          </IconButton>\r\n          <TextField \r\n            id=\"todoInput\" \r\n            label=\"새로운 TODO 등록\" \r\n            variant=\"outlined\" \r\n            name=\"task\" \r\n            value={this.state.task}\r\n            onChange={this.onHandleChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React,{ Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport AddTodo from \"./AddTodo\";\r\nimport axios from 'axios'; \r\n\r\nclass TodoList2 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked : [],\r\n      max_content_id : 0,\r\n      contents: [],\r\n    };\r\n  }\r\n    \r\n  loadingData = async () => { \r\n    try { const response = await axios.get( \r\n     //  'https://jsonplaceholder.typicode.com/todos/1' \r\n      'http://3.35.89.32:5000/api/todo' \r\n     ); \r\n      this.setState({ \r\n         contents: response.data, \r\n       }); \r\n      } catch (e) { \r\n       console.log(e);\r\n      } \r\n  }; \r\n      \r\n   //마운트 될때 실행 \r\n  componentDidMount() { \r\n     const { loadingData } = this; \r\n     loadingData(); \r\n  }\r\n\r\n  deleteTodo(_id) {\r\n    //서버로 등록\r\n    const formData = new URLSearchParams();\r\n    formData.append('id',_id);\r\n\r\n    axios.post('http://3.35.89.32:5000/api/delete', formData)\r\n    .then((response) => {\r\n    // console.log(response.data);\r\n    // this.setState({\r\n    //   task: \"\"\r\n    // })\r\n    // this.props.stateRefresh();\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const handleToggle = (value) => () => {\r\n      const currentIndex = this.state.checked.indexOf(value);\r\n      const newChecked = this.state.checked;\r\n  \r\n      if (currentIndex === -1) {\r\n        newChecked.push(value);\r\n      } else {\r\n        newChecked.splice(currentIndex, 1);\r\n      }\r\n  \r\n      this.setState({checked : newChecked});\r\n    };\r\n\r\n    const handleDelete = (value) => () => {\r\n      var _contents = Array.from(this.state.contents);\r\n      var i=0;\r\n      while(i<_contents.length)\r\n      {\r\n        if(_contents[i].id === value)\r\n        {\r\n          _contents.splice(i,1);\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      this.deleteTodo(value)\r\n      this.setState({\r\n        contents:_contents\r\n      });\r\n    };   \r\n\r\n    return (\r\n      <div>\r\n        <List>\r\n          {this.state.contents.map((value,i) => {\r\n            const labelId = `checkbox-list-label-${i}`;\r\n       \r\n            return (\r\n              <ListItem key={value.id} role={undefined} dense button onClick={handleToggle(i)}>\r\n                <ListItemIcon>\r\n                  <Checkbox\r\n                    edge=\"start\"\r\n                    checked={this.state.checked.indexOf(i) !== -1}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    inputProps={{ 'aria-labelledby': labelId }}\r\n                  />\r\n                </ListItemIcon>\r\n                <ListItemText id={labelId} primary={value.task} />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton \r\n                      color=\"primary\" \r\n                      edge=\"end\" \r\n                      aria-label=\"delete\" \r\n                      onClick={handleDelete(value.id)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n        <AddTodo onSubmit={function(_task){\r\n              const maxId = this.state.max_content_id + 1\r\n              this.setState( {max_content_id: maxId} );\r\n              var _contents = this.state.contents.concat(\r\n                {id:maxId, done: false, task:_task}\r\n              );\r\n              console.log(maxId);\r\n              console.log(_contents);\r\n              this.setState({contents:_contents});\r\n            }.bind(this)}>\r\n        </AddTodo>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList2;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n//import AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function MenuAppBar() {\r\n  const classes = useStyles();\r\n  const [auth, setAuth] = React.useState(true);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const curDate = new Date()\r\n  const date = curDate.getFullYear() + '-' + (curDate.getMonth() + 1) + '-' + curDate.getDate();\r\n  \r\n  const handleChange = (event) => {\r\n    setAuth(event.target.checked);\r\n  };\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormGroup>\r\n        <FormControlLabel\r\n          control={<Switch checked={auth} onChange={handleChange} aria-label=\"login switch\" />}\r\n          label={auth ? 'Logout' : 'Login'}\r\n        />\r\n      </FormGroup>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {date}  My ToDo\r\n          </Typography>\r\n          {auth && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                {/* <AccountCircle /> */}\r\n                <Avatar alt=\"Remy Sharp\" src=\"https://scontent-gmp1-1.xx.fbcdn.net/v/t31.0-8/339245_2147412053950_963463718_o.jpg?_nc_cat=109&_nc_sid=09cbfe&_nc_ohc=VSbqQqSH1t8AX-e-QaT&_nc_ht=scontent-gmp1-1.xx&oh=b6523a0d8254a6f652c44c9440aa61aa&oe=5F6E9401\" />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TodoList2 from './todo/TodoList2';\nimport HeaderApp from './todo/HeaderApp';\nimport Container from '@material-ui/core/Container';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: { id: \"ruroo@naver.com\", \n              name: \"손기섭\"\n            },\n    };\n  }\n  \n  render() {\n    return (\n    <Container maxWidth=\"sm\">\n      <HeaderApp></HeaderApp>\n      <TodoList2></TodoList2>\n    </Container>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}